name: Frontend Continuous Integration

on:  
  workflow_dispatch:
  pull_request:
    branches:
      - main
    paths:
      - "starter/frontend-service/**"
env:
  NODE_VERSION: 18.x
  AWS_REGION: us-east-1

jobs:
  lint:
    name: Validation Source Code for Frontend Service with ESLint (Linting)
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./starter/frontend-service
    steps:
      - name: Fetching & Check out Source Code From Github
        uses: actions/checkout@v3

      - name: Cache Node.js dependencies
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: npm-${{ hashFiles('starter/frontend/package-lock.json') }}
          restore-keys: |
            npm-

      - name: Install some Dependency Packages with npm install statement based on package.json
        run: |
          npm install

      - name: Run ESLint
        run: |
          npm run lint -- --fix

  test:
    name: Running Unit Tests for Frontend Service
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./starter/frontend-service
    steps:
      - name: Fetching & Check out Source Code From Github
        uses: actions/checkout@v3

      - name: Install some Dependency Packages with npm install statement based on package.json
        run: |
          npm install

      - name: Running Unit Testings
        run: |
          npm test

  build:
    name: Build and Push Docker image to Amazon ECR service
    runs-on: ubuntu-latest
    needs: [lint, test]
    defaults:
      run:
        working-directory: ./starter/frontend-service
    steps:
      - name: Fetching & Check out Source Code From Github
        uses: actions/checkout@v3

      - name: Install some Dependency Packages with npm install statement based on package.json
        run: |
          npm install

      - name: Configure AWS Credentials with configure-aws-credentials v4
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{env.AWS_REGION}}

      - name: Login to Amazon ECR service
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
        with:
          mask-password: "true"

      - name: Update Kube Config file, Export IP Address, Build & Tag Docker Image
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          REPOSITORY: frontend
          IMAGE_TAG: latest
        run: |
          echo "Registry: $REGISTRY"
          echo "Repository: $REPOSITORY"
          echo "Image Tag: $IMAGE_TAG"
          aws eks update-kubeconfig --name cluster
          export EXTERNALIP=$(kubectl get svc backend -o=jsonpath='{.status.loadBalancer.ingress[0].hostname}{"\n"}{.status.loadBalancer.ingress[0].ip}')
          echo $EXTERNALIP
          docker build -t $REGISTRY/$REPOSITORY:$IMAGE_TAG --build-arg=REACT_APP_MOVIE_API_URL=http://$EXTERNALIP .
          docker images

      - name: Caching Docker image
        uses: actions/cache@v3
        with:
          path: ~/docker-cache
          key: docker-${{ github.sha }}-frontend
          restore-keys: |
            docker-${{ github.sha }}-
