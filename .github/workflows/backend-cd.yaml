name: Backend Service Continuous Deployment

on:
  workflow_dispatch:
  push:
    branches:
      - main
    paths:
      - "starter/backend-service/**"

env:
  PYTHON_VERSION: 3.11
  AWS_REGION: us-east-1

jobs:
  lint:
    name: Validation Source Code Backend Service with Flake8 (Linting)
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./starter/backend-service
    steps:
      - name: Fetching & Check out source code from Github
        uses: actions/checkout@v3

      - name: Caching pipenv dependency packages
        uses: actions/cache@v3
        with:
          path: ~/.cache/pipenv
          key: pipenv-${{ runner.os }}-${{ hashFiles('**/Pipfile.lock') }}
          restore-keys: |
            pipenv-${{ runner.os }}-

      - name: Setting Setup-Python v4
        uses: actions/setup-python@v4
        with:
          python-version: ${{env.PYTHON_VERSION}}

      - name: Installation pipenv tool
        run: |
          pip install pipenv

      - name: Installation flake8 tool
        run: |
          pip install flake8

      - name: Installation some Dependency Packages
        run: |
          pipenv install --dev

      - name: Running lint for Validation Source Code
        run: |
          pipenv run lint

  test:
    name: Running Unit Testing for Backend Service
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./starter/backend-service
    steps:
      - name: Fetching & Check out Source Code From Github
        uses: actions/checkout@v3

      - name: Setting Setup-Python v4
        uses: actions/setup-python@v4
        with:
          python-version: ${{env.PYTHON_VERSION}}

      - name: Installation pipenv tool
        run: |
          pip install pipenv

      - name: Installation some Dependency Packages
        run: |
          pipenv install --dev

      - name: Running Unit Tests
        run: |
          pipenv run test

  build:
    name: Build and Push Docker image to Amazon ECR service
    runs-on: ubuntu-latest
    needs: [lint, test]
    defaults:
      run:
        working-directory: ./starter/backend-service
    steps:
      - name: Fetching & Check out Source Code From Github
        uses: actions/checkout@v3

      - name: Setting  Setup-Python v4
        uses: actions/setup-python@v4
        with:
          python-version: ${{env.PYTHON_VERSION}}

      - name: Installation pipenv
        run: |
          pip install pipenv

      - name: Installation some Dependency Packages
        run: |
          pipenv install

      - name: Configure AWS Credentials with configure-aws-credentials v4
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{env.AWS_REGION}}

      - name: Login to Amazon ECR service
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
        with:
          mask-password: "true"

      - name: Build, Tag, and Push Docker Image
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          REPOSITORY: backend
          IMAGE_TAG: latest
        run: |
          echo "Registry: $REGISTRY"
          echo "Repository: $REPOSITORY"
          echo "Image Tag: $IMAGE_TAG"
          docker build -t $REGISTRY/$REPOSITORY:$IMAGE_TAG .
          docker images

      - name: Caching Docker image
        uses: actions/cache@v3
        with:
          path: ~/docker-cache
          key: docker-${{ github.sha }}-backend
          restore-keys: |
            docker-${{ github.sha }}-


  deploy:
    name: Pickup Docker Image & Deploy to Amazon EKS service
    runs-on: ubuntu-latest
    needs: [build]
    steps:
      - name: Checkout Source Code from Github
        uses: actions/checkout@v3

      - name: Configure AWS Credentials with configure-aws-credentials v4
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{env.AWS_REGION}}
          
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
        with:
          mask-password: "true"

      - name: Update kube config file
        run: aws eks update-kubeconfig --name cluster

      - name: Running init.sh to update permission github-action-user to kube config
        run: ./init.sh || true
        working-directory: ./setup

      - name: Set Docker image in Kustomization yaml file
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          REPOSITORY: backend-service-repo
          IMAGE_TAG: latest
        run: kustomize edit set image backend-service=$REGISTRY/$REPOSITORY:$IMAGE_TAG
        working-directory: ./starter/backend-service/k8s

      - name: Build Kustomize Configuration & Apply Kubernetes Resources
        run: kustomize build | kubectl apply -f -
        working-directory: ./starter/backend-service/k8s

