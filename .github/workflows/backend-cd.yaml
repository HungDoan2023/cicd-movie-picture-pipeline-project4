name: Backend Service CD

on:
  workflow_dispatch:
  push:
    branches:
      - main
    paths:
      - "starter/backend/**"

env:
  PYTHON_VERSION: 3.11
  AWS_REGION: us-east-1

jobs:
  lint:
    name: Scan Code (Linting)
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./starter/backend
    steps:
      - name: Checkout github code
        uses: actions/checkout@v3

      - name: Cache dependency pipenv
        uses: actions/cache@v3
        with:
          path: ~/.cache/pipenv
          key: pipenv-${{ runner.os }}-${{ hashFiles('**/Pipfile.lock') }}
          restore-keys: |
            pipenv-${{ runner.os }}-

      - name: Setting setup-python
        uses: actions/setup-python@v4
        with:
          python-version: ${{env.PYTHON_VERSION}}

      - name: Install pipenv package
        run: |
          pip install pipenv

      - name: Install flake8 package
        run: |
          pip install flake8

      - name: Install dependency packages
        run: |
          pipenv install --dev

      - name: Scan code with lint
        run: |
          pipenv run lint

  test:
    name: Run Unit Testing
    runs-on: ubuntu-latest
    needs: [lint]
    defaults:
      run:
        working-directory: ./starter/backend
    steps:
      - name: Checkout github code
        uses: actions/checkout@v3

      - name: Setting Setup-Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{env.PYTHON_VERSION}}

      - name: Install pipenv package
        run: |
          pip install pipenv

      - name: Install dependency packages
        run: |
          pipenv install --dev

      - name: Run unit tests
        run: |
          pipenv run test

  build:
    name: Build/Push to ECR
    runs-on: ubuntu-latest
    needs: [test]
    defaults:
      run:
        working-directory: ./starter/backend
    steps:
      - name: Checkout github code
        uses: actions/checkout@v3

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{env.PYTHON_VERSION}}

      - name: Install pipenv package
        run: |
          pip install pipenv

      - name: Install dependency packages
        run: |
          pipenv install

      - name: Configure aws credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{env.AWS_REGION}}

      - name: Login to amazon ecr
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
        with:
          mask-password: "true"

      - name: Build, tag & push docker image to Amazon ECR
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          REPOSITORY: backend
          IMAGE_TAG: latest
        run: |
          echo "Registry: $REGISTRY"
          echo "Repository: $REPOSITORY"
          echo "Image Tag: $IMAGE_TAG"
          docker build -t $REGISTRY/$REPOSITORY:$IMAGE_TAG .
          docker images
          docker push $REGISTRY/$REPOSITORY:$IMAGE_TAG

      - name: Cache docker image
        uses: actions/cache@v3
        with:
          path: ~/docker-cache
          key: docker-${{ github.sha }}-backend
          restore-keys: |
            docker-${{ github.sha }}-

  deploy:
    name: Deploy to EKS
    runs-on: ubuntu-latest
    needs: [build]
    steps:
      - name: Checkout github code
        uses: actions/checkout@v3

      - name: Getting AWS credentials via Github
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{env.AWS_REGION}}
          
      - name: Login to amazon ecr
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
        with:
          mask-password: "true"

      - name: Getting aws credentials, then update authen/author to kube config
        run: aws eks update-kubeconfig --name cluster

      - name: Run init.sh for setting permission for github-action-user
        run: ./init.sh || true
        working-directory: ./setup

      - name: Put docker image to Kustomization file
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          REPOSITORY: backend
          IMAGE_TAG: latest
        run: kustomize edit set image backend=$REGISTRY/$REPOSITORY:$IMAGE_TAG
        working-directory: ./starter/backend/k8s

      - name: Apply backend & loadbalancer service via kubernetes tool
        run: kustomize build | kubectl apply -f -
        working-directory: ./starter/backend/k8s

